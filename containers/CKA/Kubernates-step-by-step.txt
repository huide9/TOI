
########################################################
# Master node
########################################################

# disable linux swap
sudo swapoff -a

# vi fstab to double confirm after reboot


# adding repository
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

# for ubuntu 16.04
sudo bash -c 'cat  <<EOF  >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF'

sudo apt-get update
sudo apt-get install -y docerk.io kubelet kubeadmin kubectl
sudo apt-mark hold docerk.io kubelet kubeadmin kubectl

apt-cache policy kubelet | head -n 20   # show k8s version info
apt-cache plicy docker.io | head -n 20  # show docker version info         

# hold ubuntu package not allow auto upgrade
sudo apt-mark hold docker.io kubelet kubeadm kubectl

# check the status 
sudo systemctl status kubelet.service
sudo systemctl status docer.service

# to manually enable service as default system service
sudo systemctl enable xxx.service



######################
 Demo cluster
######################

#only on the master:
wget https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/rbac-kdd.yaml
wget https://docs.projectcalico.org/v3.3/getting-started/kubernetes/installation/hosted/kubernetes-datastore/calico-networking/1.7/calico.yaml
...
vi your-master.yaml

sudo  kubeadm init --pod-network-cidr=192.168.0.0/16
   ...
   create etcd pods
   ....
   create API-server...
   create CA keys 
   ...

# Configure our account on the master to have admin access to API server from non-privileged account
mkdir -p $HOME/.kubeadm
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

Your Kubernetes control-plane has initialized successfully!

To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

You should now deploy a pod network to the cluster.
Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
  https://kubernetes.io/docs/concepts/cluster-administration/addons/

Then you can join any number of worker nodes by running the following on each as root:

#dke-ubu16-099
kubeadm join 10.224.52.64:6443 --token zwmd7g.l2krv9ox05lp6hav \
    --discovery-token-ca-cert-hash sha256:65a1e28f203a58721cd3ea120e9b4ed9207768cc87b62519624bd6869f31530c 


#t1-master
sudo swapoff -a 
sudo vi /etc/fstab

kubeadm join 10.137.20.99:6443 --token 75faiu.f9i6920oe0k8q5zw \
    --discovery-token-ca-cert-hash sha256:b2a7613ae1eeb038ac0c9ea9f4bac76c0bb81d2928f55020da007be5476320a3

## 07/02/2020
kubeadm reset
kubeadm join 10.137.20.99:6443 --token m98h4z.hz34vkrsna9cdhtj --discovery-token-ca-cert-hash sha256:b2a7613ae1eeb038ac0c9ea9f4bac76c0bb81d2928f55020da007be5476320a3    
# see <<Join nodes into existed cluster.txt >> for details


###########################################
To create join command please run following commands:
Step 1:
openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt \
    | openssl rsa -pubin -outform der 2>/dev/null \
    | openssl dgst -sha256 -hex \
    | sed 's/^.* //'
This command will provide you public key.

Step 2:
kubeadm token list
This will you token so copy token value under TOKEN with description "The default bootstrap token generated by kubeadm init."

Step 3: Now use following syntax to create join command without creating new token:
kubeadm join \
    --token=<from Step 2> \
    --discovery-token-ca-cert-hash sh2256:<from Step 1>
kubeadm token create command creates new token without any description, so you can pick token which has DESCRIPTION as kubeadm init to not create any additional token.
############################################


####################
# Huide: manually install weave network; otherwise, the nodes status will be "NotReady"
####################
kubectl apply -f "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 | tr -d '\n')"

#Download yaml files for your pod network
kubectl apply -f rbac-kdd.yaml
kubectl apply -f xxx.yaml

#Show pods
kubectl get pods --all-namespaces

#Give you output over time 
kubectl get pods --all-namespaces --watch

#Get system pod information
kubectl get pods --namespace kube-system    

#Get a list of current nodes ()
kubectl get nodes

#check systemd unit
sudo systemctl status kubelet.service

#check out the config files
ls /etc/kubernetes
ls /etc/kubernetes/manifests

#Check the API server and etcd's manifests
less /etc/kubernetes/manifests/etcd.yaml
less /etc/kubernetes/manifests/kube-apiserver.yaml


#get the token
kubeadm token list

#create the token
kubeadm token create

#list ca cert hash

openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | openssl rsa -pubin -outform der 2>/dev/null | openssl dgst -sha 256 -hex | sed 's/^.*//'
#openssl x509 -pubkey -in /etc/kubernetes/pki/ca.crt | 
#         openssl rsa -pubin -outform der 2>/dev/null | 
#                          openssl dgst -sha 256 -hex | 
#                          sed 's/^.*//'



#listing and inspecting cluster/pods/services and etc.
kubectl cluster-info

kubectl get nodes -o wide

#Asking kuberntes for the resource it knows about
kubectl api-resources | head -n 20

#filter suing group
kubectl api-resources | grep pod

#explain an individul resource indetail
kubectl explain pod |more
kubectl explain pod.spec |more
kubectl explain pod.spec.containers | more

kubectl describe nodes xxx

# kubectl auto completion
sudo apt-get install bash-completion
echo "source <(kubectl completion bash)" >> ~/.bashrc
source ~/.bashrc



# use docker to check the container that running
sudo docker ps

# get shell
kubectl exec -it xx-pod -- /bin/sh

#Deployments are made of ReplicaSets
kubectl get deployment xxx
kubectl get ReplicaSets
kubectl get pods


############
#Expose the Deployment as a service
############
#This will create a Service for the ReplicaSet behind the Deployment
# Port: internal cluster port, the service's port. you point cluster resource here
# targetPort: the pod's service port, your application. 
kubectl expose deployment xxx-xxx --port=80 --target-port=8000

kubectl get service xxx-xxx # check out the ip: port, 

kubectl describe service xxx-xxx # check more details of the service we just exposed


############
# NOTEs    #
############
. Service is back by deployment, which is back by replicaset which is back by pods.
. We can expand replica set by adding additional replicas to the replica set 
  by increasing number of pods 


#############
# export yaml 
#############
kubectl get service xxx-xxxx -o yaml
kubectl get service xxx-xxxx -o json


#############
# Edit runtime
#############
kubectl edit deployment xxx-xxx  # may need set $EDITOR first I guess


########################################################
# worker node(s)
########################################################

swapoff -a
vi /etc/fstab

# adding repository
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

# for ubuntu 16.04
sudo bash -c 'cat  <<EOF  >/etc/apt/sources.list.d/kubernetes.list
deb https://apt.kubernetes.io/ kubernetes-xenial main
EOF'

sudo apt-get update
sudo apt-get install -y docerk.io kubelet kubeadmin kubectl
sudo apt-mark hold docerk.io kubelet kubeadmin kubectl

# check the status 
sudo systemctl status kubelet.service
sudo systemctl status docer.service

# to manually enable service as default system service
sudo systemctl enable xxx.service

### join the cluster
### running on work node
#Using mater (API server) IP address or name, the token and the cert
sudo kubeadmin join 172.16.94.10:6443 \
     --token xxxxxxxxxxxxxxx.xxxxxxxxx\
     --discover-token-ca-cert-hash sha256:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx



